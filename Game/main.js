import {
  Camera,
  Color,
  Component,
  Convex,
  Keyboard,
  Mouse,
  RenderComponent,
  RigidbodyComponent,
  Runtime_default,
  ShapeRendererComponent,
  TileMap,
  TileRendererComponent,
  Vector2,
  __name,
  lerp
} from "../chunk-UVEQVABF.js";

// src/Game/Components/CameraFollowComponent.ts
var CameraFollowComponent = class extends Component {
  defaults = {
    followSpeed: 0.8,
    threshold: 100
  };
  update({ followSpeed, threshold }, entity) {
    const speed = Camera.position.distance(entity.transform.position) / (threshold / Camera.zoom) * followSpeed;
    Camera.position = Camera.position.lerp(entity.transform.position, speed);
    if (Runtime_default.debug) {
      Runtime_default.canvas.vector(Camera.cameraToWorldSpace(new Vector2(50, 50).minus(Runtime_default.canvas.middle)), 0, Vector2.up.multiply(40).divide(Camera.zoom), Color.red);
    }
  }
};
__name(CameraFollowComponent, "CameraFollowComponent");

// src/Game/Components/FollowPlayerComponent.ts
var FollowPlayerComponent = class extends Component {
  dependencies = [RigidbodyComponent];
  defaults = {
    speed: 1,
    distance: 16
  };
  update(attributes, entity) {
    const player = Runtime_default.getEntity("player");
    const rigidbody = entity.getComponent(RigidbodyComponent);
    if (!player)
      throw new Error("No player entity found.");
    const distance = entity.transform.position.distance(player.transform.position);
    if (distance > attributes.distance)
      rigidbody.velocity = entity.transform.position.minus(player.transform.position).normalize().invert().multiply(attributes.speed).limit(attributes.distance);
  }
};
__name(FollowPlayerComponent, "FollowPlayerComponent");

// src/Game/Components/KeyboardControllerComponent.ts
var KeyboardControllerComponent = class extends Component {
  dependencies = [RigidbodyComponent];
  defaults = {
    speed: 1,
    sprintSpeed: 5,
    velocity: new Vector2()
  };
  update(attributes, entity) {
    const rigidbody = entity.getComponent(RigidbodyComponent);
    let { speed, sprintSpeed } = attributes;
    if (Keyboard.isDown("shift"))
      speed = sprintSpeed;
    let direction = Vector2.zero;
    if (Keyboard.isDown("s")) {
      direction = direction.add(Vector2.down);
    }
    if (Keyboard.isDown("w")) {
      direction = direction.add(Vector2.up);
    }
    if (Keyboard.isDown("a")) {
      direction = direction.add(Vector2.left);
    }
    if (Keyboard.isDown("d")) {
      direction = direction.add(Vector2.right);
    }
    direction = direction.rotate(-Camera.rotation);
    rigidbody.velocity = rigidbody.velocity.add(direction);
  }
};
__name(KeyboardControllerComponent, "KeyboardControllerComponent");

// src/Game/Components/MouseControllerComponent.ts
var MouseControllerComponent = class extends Component {
  dependencies = [RigidbodyComponent];
  defaults = {
    speed: 1
  };
  update(attributes, entity) {
    const { speed } = attributes;
    const rigidbody = entity.getComponent(RigidbodyComponent);
    attributes.speed = Mouse.right ? 7.5 : 2.5;
    if (Mouse.middle)
      attributes.speed = Mouse.position.minus(entity.transform.position).length;
    rigidbody.velocity = Mouse.position.minus(entity.transform.position).normalize().multiply(speed);
  }
};
__name(MouseControllerComponent, "MouseControllerComponent");

// src/Game/Components/RotateComponent.ts
var RotateComponent = class extends RenderComponent {
  defaults = {
    rotationSpeed: 1
  };
  render(attributes, entity) {
    entity.transform.rotation += attributes.rotationSpeed;
  }
};
__name(RotateComponent, "RotateComponent");

// src/Game/Components/ZoomComponent.ts
var ZoomComponent = class extends Component {
  defaults = {
    cameraRotation: 0,
    zoom: 1,
    zoomSpeed: 0.05
  };
  update(attributes) {
    if (Keyboard.isPressed("arrowright"))
      attributes.cameraRotation += 45;
    if (Keyboard.isPressed("arrowleft"))
      attributes.cameraRotation -= 45;
    attributes.zoom = lerp(attributes.zoom, Math.max(1, Math.min(Mouse.wheel, 16)), 0.8);
    Camera.rotation = lerp(Camera.rotation, attributes.cameraRotation, 0.02);
    Camera.zoom = lerp(Camera.zoom, attributes.zoom, attributes.zoomSpeed);
  }
};
__name(ZoomComponent, "ZoomComponent");

// src/Game/main.ts
Runtime_default.registerComponent(MouseControllerComponent, KeyboardControllerComponent, FollowPlayerComponent, ZoomComponent, RotateComponent, CameraFollowComponent);
var shapes = [
  {
    offset: new Vector2(16, 16),
    rotation: 0,
    color: Color.red,
    type: "box",
    size: 32
  },
  {
    offset: new Vector2(-16, -16),
    rotation: 45,
    color: Color.red,
    type: "box",
    size: 32
  },
  {
    offset: new Vector2(16, -16),
    rotation: 0,
    color: Color.red,
    type: "circle",
    size: 32
  },
  {
    offset: new Vector2(-16, 16),
    rotation: 225,
    color: Color.red,
    type: "circle",
    size: 32,
    arc: [0, 180]
  }
];
var points = Convex.convertShapesToPoints(shapes);
async function start() {
  Runtime_default.canvas.background = Color.black;
  Camera.zoom = 4;
  const tileMap = await TileMap.load("assets/tilemap.png", { tileWidth: 16, tileHeight: 16 });
  const player = Runtime_default.createEntity("player");
  player.addComponent(TileRendererComponent, {
    tileMap,
    tile: [13, 14, 15]
  });
  player.addComponent([CameraFollowComponent, KeyboardControllerComponent, ZoomComponent]);
  const enemy = Runtime_default.createEntity("enemy");
  enemy.transform.position = Vector2.random.multiply(100);
  enemy.addComponent(ShapeRendererComponent, {
    shapes
  });
  Runtime_default.onUpdate(() => {
    Runtime_default.canvas.wirePolygon(enemy.transform.position.add(100, 0), 0, Color.green, points);
  });
  const circle = Runtime_default.createEntity("circle");
  circle.transform.position = Vector2.zero;
  circle.addComponent(ShapeRendererComponent, {
    shapes: [
      {
        type: "circle",
        size: 32,
        color: Color.blue,
        offset: new Vector2(0, 0),
        rotation: 180,
        arc: [0, 180]
      }
    ]
  });
  circle.addComponent(RotateComponent);
}
__name(start, "start");
start();
//# sourceMappingURL=data:application/json;base64,
